package com.company;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import javax.swing.*;

/**
 *
 * @author randkill
 */
public class PhotoEditWindow extends javax.swing.JFrame {
    private String Address = null;

    public void setAddress(String address) {
        Address = address;
    }
    private String Name;        //photo class atributes
    private PhotoType Type;
    private String Descriptions;
    private int Size;
    private int CDay;        //date class atributes
    private int CMonth;
    private int CYear;
    private int MDay;        //date class atributes
    private int MMonth;
    private int MYear;
    private int lenght , width;
    private int combo;
    public void readFile(String directory)
    {
        Address = directory;
        FileEditReader readF = new FileEditReader(Address , 14);

        this.Name = readF.readline(2);
        fileNameTextField.setText(Name);
        this.Descriptions = readF.readline(11);
        descriptionTextField.setText(Descriptions);
        this.Address = readF.readline(10);
        directoryTextField.setText(Address);
        this.Size = Integer.parseInt(readF.readline(3));
        fileSizeTextField.setText(new Integer(Size).toString());
        this.CYear = Integer.parseInt(readF.readline(4));
        creationYearTextField.setText(new Integer(CYear).toString());
        this.CMonth= Integer.parseInt(readF.readline(5));
        creationMonthTextField.setText(new Integer(CMonth).toString());
        this.CDay= Integer.parseInt(readF.readline(6));
        creationDayTextField.setText(new Integer(CDay).toString());
        this.MYear= Integer.parseInt(readF.readline(7));
        managedYearTextField.setText(new Integer(MYear).toString());
        this.MMonth= Integer.parseInt(readF.readline(8));
        managedMonthTextField.setText(new Integer(MMonth).toString());
        this.MDay= Integer.parseInt(readF.readline(9));
        managedDayTextField.setText(new Integer(MDay).toString());
        this.lenght = Integer.parseInt(readF.readline(12));
        lenghtTextField.setText(new Integer(lenght).toString());
        this.width = Integer.parseInt(readF.readline(13));
        widthTextField.setText(new Integer(width).toString());


        String tp;
        tp =readF.readline(14);

        if (tp == "jpg") {
            Type = PhotoType.JPG;
            combo = 0;
        }
        else if (tp == "jpeg") {
            Type = PhotoType.JPEG;
            combo = 1;
        }
        else if (tp == "exif") {
            Type = PhotoType.EXIF;
            combo = 2;
        }
        else if (tp == "heif") {
            Type = PhotoType.HEIF;
            combo = 3;
        }
        else if (tp == "tiff") {
            Type = PhotoType.TIFF;
            combo = 4;
        }
        else if (tp == "gif") {
            Type = PhotoType.GIF;
            combo = 5;
        }
        else if (tp == "png") {
            Type = PhotoType.PNG;
            combo = 6;
        }
        else if (tp == "ppm") {
            Type = PhotoType.PPM;
            combo = 7;
        }
        else if (tp == "webp") {
            Type = PhotoType.WEBP;
            combo = 8;
        }
        else if (tp == "bat") {
            Type = PhotoType.BAT;
            combo = 9;
        }
        else if (tp == "bpg") {
            Type = PhotoType.BPG;
            combo = 10;
        }
        else if (tp == "xcf") {
            Type = PhotoType.XCF;
            combo = 11;
        }
        fileFOrmatComboBox.setSelectedIndex(combo);

    }
    /**
     * Creates new form PhotoWindows
     */
    public PhotoEditWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        welcomeLabel = new javax.swing.JLabel();
        fileNameLabel = new javax.swing.JLabel();
        fileSizeLabel = new javax.swing.JLabel();
        fileFormatLabel = new javax.swing.JLabel();
        fileNameTextField = new javax.swing.JTextField();
        fileSizeTextField = new javax.swing.JTextField();
        mbsLabel = new javax.swing.JLabel();
        fileFOrmatComboBox = new javax.swing.JComboBox<>();
        managedYearTextField = new javax.swing.JTextField();
        creationYearTextField = new javax.swing.JTextField();
        managedMonthTextField = new javax.swing.JTextField();
        creationMonthTextField = new javax.swing.JTextField();
        managedDayTextField = new javax.swing.JTextField();
        creationDayTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        creationDateLabel = new javax.swing.JLabel();
        managedDateLabel = new javax.swing.JLabel();
        resulationLabel = new javax.swing.JLabel();
        lenghtTextField = new javax.swing.JTextField();
        widthTextField = new javax.swing.JTextField();
        selectFileLabel = new javax.swing.JLabel();
        selectFileButton = new javax.swing.JButton();
        otherwiseLabel = new javax.swing.JLabel();
        directoryTextField = new javax.swing.JTextField();
        nextButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        descriptionLabel = new javax.swing.JLabel();
        descriptionTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(650, 450));

        welcomeLabel.setText("Enter data of your photo file :");

        fileNameLabel.setText("file name :");

        fileSizeLabel.setText("file size :");

        fileFormatLabel.setText("file format :");

        fileNameTextField.setText("name");
        fileNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileNameTextFieldActionPerformed(evt);
            }
        });

        fileSizeTextField.setText("size");
        fileSizeTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileSizeTextFieldActionPerformed(evt);
            }
        });

        mbsLabel.setText("mbs");

        fileFOrmatComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "jpg", "jpeg", "exif", "heif", "tiff", "gif", "png", "ppm", "webp", "bat", "bpg", "xcf" }));
        fileFOrmatComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileFOrmatComboBoxActionPerformed(evt);
            }
        });

        managedYearTextField.setText("year");
        managedYearTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                managedYearTextFieldActionPerformed(evt);
            }
        });

        creationYearTextField.setText("year");
        creationYearTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                creationYearTextFieldActionPerformed(evt);
            }
        });

        managedMonthTextField.setText("month");
        managedMonthTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                managedMonthTextFieldActionPerformed(evt);
            }
        });

        creationMonthTextField.setText("month");
        creationMonthTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                creationMonthTextFieldActionPerformed(evt);
            }
        });

        managedDayTextField.setText("day");
        managedDayTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                managedDayTextFieldActionPerformed(evt);
            }
        });

        creationDayTextField.setText("day");
        creationDayTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                creationDayTextFieldActionPerformed(evt);
            }
        });

        jLabel6.setText("/");

        jLabel7.setText("/");

        jLabel8.setText("/");

        jLabel9.setText("/");

        creationDateLabel.setText("creation date :");

        managedDateLabel.setText("managed date :");

        resulationLabel.setText("resulation :");

        lenghtTextField.setText("lenght");
        lenghtTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lenghtTextFieldActionPerformed(evt);
            }
        });

        widthTextField.setText("width");
        widthTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                widthTextFieldActionPerformed(evt);
            }
        });

        selectFileLabel.setText("select file :");

        selectFileButton.setText("select file");
        selectFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectFileButtonActionPerformed(evt);
            }
        });

        otherwiseLabel.setText("otherwise enter directory :");

        directoryTextField.setText("directory ");
        directoryTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                directoryTextFieldActionPerformed(evt);
            }
        });

        nextButton.setText("next");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        backButton.setText("back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        descriptionLabel.setText("description :");

        descriptionTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descriptionTextFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(fileNameLabel)
                                        .addComponent(fileSizeLabel)
                                        .addComponent(fileFormatLabel))
                                .addGap(30, 30, 30)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(fileNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                                .addComponent(fileSizeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(mbsLabel)))
                                                .addGap(56, 56, 56)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                                .addComponent(creationDateLabel)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(creationYearTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                                .addComponent(managedDateLabel)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                                                                .addComponent(managedYearTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                                .addComponent(creationMonthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(jLabel8))
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                                .addComponent(managedMonthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(managedDayTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(creationDayTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(0, 49, Short.MAX_VALUE))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(fileFOrmatComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(24, 24, 24))))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(welcomeLabel)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(resulationLabel)
                                                        .addComponent(selectFileLabel))
                                                .addGap(33, 33, 33)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                                .addComponent(lenghtTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addComponent(widthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                                .addComponent(selectFileButton)
                                                                .addGap(82, 82, 82)
                                                                .addComponent(descriptionLabel)))))
                                .addGap(0, 281, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(backButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(directoryTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(otherwiseLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(descriptionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(welcomeLabel)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(fileNameLabel)
                                        .addComponent(fileNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(creationDateLabel)
                                        .addComponent(creationYearTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(creationMonthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(creationDayTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel7)
                                        .addComponent(jLabel8))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(fileSizeLabel)
                                        .addComponent(fileSizeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(mbsLabel)
                                        .addComponent(managedDateLabel)
                                        .addComponent(managedYearTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(managedMonthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(managedDayTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel6)
                                        .addComponent(jLabel9))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(fileFormatLabel)
                                        .addComponent(fileFOrmatComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(resulationLabel)
                                        .addComponent(lenghtTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(widthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(selectFileLabel)
                                                        .addComponent(selectFileButton)
                                                        .addComponent(descriptionLabel))
                                                .addGap(18, 18, 18)
                                                .addComponent(otherwiseLabel))
                                        .addComponent(descriptionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(directoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 92, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(nextButton)
                                        .addComponent(backButton))
                                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>

    private void fileSizeTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
        fileSizeTextField.getText();
        Size = Integer.parseInt(fileSizeTextField.getText());
    }

    private void selectFileButtonActionPerformed(java.awt.event.ActionEvent evt) {
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("choose directory");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(true);

        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            JOptionPane.showMessageDialog(null, "selected directory is : " + chooser.getSelectedFile());
            directoryTextField.setText(chooser.getSelectedFile().getAbsolutePath());
            Address = chooser.getSelectedFile().getAbsolutePath();
        } else {

        }
    }
    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {
        setVisible(false);
    }

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {
        fileNameTextField.getText();
        Name = fileNameTextField.getText();
        if (fileFOrmatComboBox.getSelectedIndex() == 0) {
            Type = PhotoType.JPG;
        }
        else if (fileFOrmatComboBox.getSelectedIndex() == 1) {
            Type = PhotoType.JPEG;
        }
        else if (fileFOrmatComboBox.getSelectedIndex() == 2) {
            Type = PhotoType.EXIF;
        }
        else if (fileFOrmatComboBox.getSelectedIndex() == 3) {
            Type = PhotoType.HEIF;
        }
        else if (fileFOrmatComboBox.getSelectedIndex() == 4) {
            Type = PhotoType.TIFF;
        }
        else if (fileFOrmatComboBox.getSelectedIndex() == 5) {
            Type = PhotoType.GIF;
        }
        else if (fileFOrmatComboBox.getSelectedIndex() == 6) {
            Type = PhotoType.PNG;
        }
        else if (fileFOrmatComboBox.getSelectedIndex() == 7) {
            Type = PhotoType.PPM;
        }
        else if (fileFOrmatComboBox.getSelectedIndex() == 8) {
            Type = PhotoType.WEBP;
        }
        else if (fileFOrmatComboBox.getSelectedIndex() == 9) {
            Type = PhotoType.BAT;
        }
        else if (fileFOrmatComboBox.getSelectedIndex() == 10) {
            Type = PhotoType.BPG;
        }
        else if (fileFOrmatComboBox.getSelectedIndex() == 11) {
            Type = PhotoType.XCF;
        }
        directoryTextField.getText();
        Address = directoryTextField.getText();
        descriptionTextField.getText();
        Descriptions = descriptionTextField.getText();
        try{
            fileSizeTextField.getText();
            Size = Integer.parseInt(fileSizeTextField.getText());
            lenghtTextField.getText();
            lenght = Integer.parseInt(lenghtTextField.getText());
            widthTextField.getText();
            width = Integer.parseInt(widthTextField.getText());
            creationYearTextField.getText();
            CYear = Integer.parseInt(creationYearTextField.getText());
            if(CYear>=1900 && CYear<=3000)
            {
                this.CYear = CYear;
            }
            else
            {
                CYear = 0;
                JOptionPane.showMessageDialog(null , "yeear must be betwwen 1900 and 3000 , \n recorrect your entered value !");
                creationYearTextField.setText("year");
            }
            creationMonthTextField.getText();
            CMonth = Integer.parseInt(creationMonthTextField.getText());
            if(CMonth>=1 && CMonth<=12)
            {
                this.CMonth = CMonth;
            }
            else
            {
                CMonth = 0;
                JOptionPane.showMessageDialog(null , "month must be between 1 and 12 , \n recorrect your value !");
                creationMonthTextField.setText("month");
            }
            creationDayTextField.getText();
            CDay = Integer.parseInt(creationDayTextField.getText());
            if(CDay >=1 && CDay<=30)
            {
                this.CDay = CDay;
            }
            else
            {
                CDay = 0;
                JOptionPane.showMessageDialog(null , "day must be between 0 and 30 , \n recorrect your value !");
                creationDayTextField.setText("day");
            }
            managedYearTextField.getText();
            MYear = Integer.parseInt(managedYearTextField.getText());
            if(MYear>=1900 && MYear<=3000)
            {
                this.MYear = MYear;
            }
            else
            {
                MYear = 0;
                JOptionPane.showMessageDialog(null , "yeear must be betwwen 1900 and 3000 , \n recorrect your entered value !");
                managedYearTextField.setText("year");
            }
            managedMonthTextField.getText();
            MMonth = Integer.parseInt(managedMonthTextField.getText());
            if(MMonth>=1 && MMonth<=12)
            {
                this.MMonth = MMonth;
            }
            else
            {
                MMonth = 0;
                JOptionPane.showMessageDialog(null , "month must be between 1 and 12 , \n recorrect your value !");
                managedMonthTextField.setText("month");
            }
            managedDayTextField.getText();
            MDay = Integer.parseInt(managedDayTextField.getText());
            if(MDay >=1 && MDay<=30)
            {
                this.MDay = MDay;
            }
            else
            {
                MDay = 0;
                JOptionPane.showMessageDialog(null , "day must be between 0 and 30 , \n recorrect your value !");
                managedDayTextField.setText("day");
            }
            creatPhoto();
            setVisible(false);
        }
        catch (NumberFormatException e)
        {
            JOptionPane.showMessageDialog(null ,"enter the fields correctly");
        }
    }
    public boolean status()
    {
        return true;
    }

    private void fileNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
        fileNameTextField.getText();
        Name = fileNameTextField.getText();
    }

    private void fileFOrmatComboBoxActionPerformed(java.awt.event.ActionEvent evt) {
            if (fileFOrmatComboBox.getSelectedIndex() == 0) {
                Type = PhotoType.JPG;
            }
            else if (fileFOrmatComboBox.getSelectedIndex() == 1) {
                Type = PhotoType.JPEG;
            }
            else if (fileFOrmatComboBox.getSelectedIndex() == 2) {
                Type = PhotoType.EXIF;
            }
            else if (fileFOrmatComboBox.getSelectedIndex() == 3) {
                Type = PhotoType.HEIF;
            }
            else if (fileFOrmatComboBox.getSelectedIndex() == 4) {
                Type = PhotoType.TIFF;
            }
            else if (fileFOrmatComboBox.getSelectedIndex() == 5) {
                Type = PhotoType.GIF;
            }
            else if (fileFOrmatComboBox.getSelectedIndex() == 6) {
                Type = PhotoType.PNG;
            }
            else if (fileFOrmatComboBox.getSelectedIndex() == 7) {
                Type = PhotoType.PPM;
            }
            else if (fileFOrmatComboBox.getSelectedIndex() == 8) {
                Type = PhotoType.WEBP;
            }
            else if (fileFOrmatComboBox.getSelectedIndex() == 9) {
                Type = PhotoType.BAT;
            }
            else if (fileFOrmatComboBox.getSelectedIndex() == 10) {
                Type = PhotoType.BPG;
            }
            else if (fileFOrmatComboBox.getSelectedIndex() == 11) {
                Type = PhotoType.XCF;
            }
    }

    private void lenghtTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
        lenghtTextField.getText();
        lenght = Integer.parseInt(lenghtTextField.getText());
    }

    private void widthTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
        widthTextField.getText();
        width = Integer.parseInt(widthTextField.getText());
    }

    private void directoryTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
        directoryTextField.getText();
        Address = directoryTextField.getText();
    }

    private void creationYearTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
        creationYearTextField.getText();
        CYear = Integer.parseInt(creationYearTextField.getText());
        if(CYear>=1900 && CYear<=3000)
        {
            this.CYear = CYear;
        }
        else
        {
            CYear = 0;
            JOptionPane.showMessageDialog(null , "yeear must be betwwen 1900 and 3000 , \n recorrect your entered value !");
            creationYearTextField.setText("year");
        }
    }

    private void creationMonthTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
        creationMonthTextField.getText();
        CMonth = Integer.parseInt(creationMonthTextField.getText());
        if(CMonth>=1 && CMonth<=12)
        {
            this.CMonth = CMonth;
        }
        else
        {
            CMonth = 0;
            JOptionPane.showMessageDialog(null , "month must be between 1 and 12 , \n recorrect your value !");
            creationMonthTextField.setText("month");
        }
    }

    private void creationDayTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
        creationDayTextField.getText();
        CDay = Integer.parseInt(creationDayTextField.getText());
        if(CDay >=1 && CDay<=30)
        {
            this.CDay = CDay;
        }
        else
        {
            CDay = 0;
            JOptionPane.showMessageDialog(null , "day must be between 0 and 30 , \n recorrect your value !");
            creationDayTextField.setText("day");
        }
    }

    private void managedYearTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
        managedYearTextField.getText();
        MYear = Integer.parseInt(managedYearTextField.getText());
        if(MYear>=1900 && MYear<=3000)
        {
            this.MYear = MYear;
        }
        else
        {
            MYear = 0;
            JOptionPane.showMessageDialog(null , "yeear must be betwwen 1900 and 3000 , \n recorrect your entered value !");
            managedYearTextField.setText("year");
        }
    }

    private void managedMonthTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
        managedMonthTextField.getText();
        MMonth = Integer.parseInt(managedMonthTextField.getText());
        if(MMonth>=1 && MMonth<=12)
        {
            this.MMonth = MMonth;
        }
        else
        {
            MMonth = 0;
            JOptionPane.showMessageDialog(null , "month must be between 1 and 12 , \n recorrect your value !");
            managedMonthTextField.setText("month");
        }
    }

    private void managedDayTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
        managedDayTextField.getText();
        MDay = Integer.parseInt(managedDayTextField.getText());
        if(MDay >=1 && MDay<=30)
        {
            this.MDay = MDay;
        }
        else
        {
            MDay = 0;
            JOptionPane.showMessageDialog(null , "day must be between 0 and 30 , \n recorrect your value !");
            managedDayTextField.setText("day");
        }
    }

    private void descriptionTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
        descriptionTextField.getText();
        Descriptions = descriptionTextField.getText();
    }

    /**
     * @param args the command line arguments
     */

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PhotoWindows.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PhotoWindows.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PhotoWindows.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PhotoWindows.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PhotoWindows().setVisible(true);
            }
        });
    }
    private void creatPhoto()
    {
        Date cDate = new Date(CDay , CMonth , CYear);
        Date mDate = new Date(MDay , MMonth , MYear);
        Dimensions dimensions = new Dimensions(lenght , width);
        Photo photo = new Photo(Name, Type, Descriptions, Address, Size
                , cDate, mDate, dimensions);
        try {
            FileW creator = new FileW(photo.toString(), Address+"/"+Name);
            creator.writeFile();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null , e);;
        }
    }

    // Variables declaration - do not modify
    private javax.swing.JButton backButton;
    private javax.swing.JLabel creationDateLabel;
    private javax.swing.JTextField creationDayTextField;
    private javax.swing.JTextField creationMonthTextField;
    private javax.swing.JTextField creationYearTextField;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JTextField descriptionTextField;
    private javax.swing.JTextField directoryTextField;
    private javax.swing.JComboBox<String> fileFOrmatComboBox;
    private javax.swing.JLabel fileFormatLabel;
    private javax.swing.JLabel fileNameLabel;
    private javax.swing.JTextField fileNameTextField;
    private javax.swing.JLabel fileSizeLabel;
    private javax.swing.JTextField fileSizeTextField;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField lenghtTextField;
    private javax.swing.JLabel managedDateLabel;
    private javax.swing.JTextField managedDayTextField;
    private javax.swing.JTextField managedMonthTextField;
    private javax.swing.JTextField managedYearTextField;
    private javax.swing.JLabel mbsLabel;
    private javax.swing.JButton nextButton;
    private javax.swing.JLabel otherwiseLabel;
    private javax.swing.JLabel resulationLabel;
    private javax.swing.JButton selectFileButton;
    private javax.swing.JLabel selectFileLabel;
    private javax.swing.JLabel welcomeLabel;
    private javax.swing.JTextField widthTextField;
    // End of variables declaration
}
